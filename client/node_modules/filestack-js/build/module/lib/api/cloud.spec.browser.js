/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __assign, __awaiter, __generator } from "tslib";
import { config } from './../../config';
import { CloudClient, PICKER_KEY } from './cloud';
import * as utils from './../utils';
import * as nock from 'nock';
var testApiKey = 'API_KEY';
var testTokSession = 'TOK_SESSION';
var testTokArchiveId = 'ARCHIVE_ID';
var testCloudToken = 'testCloudToken';
var testSecurity = {
    policy: 'examplePolicy',
    signature: 'exampleSignature',
};
var sessionURls = config.urls;
var testSession = {
    apikey: testApiKey,
    urls: sessionURls,
};
var scope = nock(sessionURls.cloudApiUrl);
scope.defaultReplyHeaders({
    'access-control-allow-origin': function (req) { return req.headers['origin']; },
    'access-control-allow-methods': function (req) { return req.headers['access-control-request-method']; },
    'access-control-allow-headers': function (req) { return req.headers['access-control-request-headers']; },
    'content-type': 'application/json',
});
var mockTokInit = jest
    .fn()
    .mockName('tokInit')
    .mockReturnValue('init');
var mockTokStart = jest
    .fn()
    .mockName('tokStart')
    .mockReturnValue('start');
var mockTokStop = jest
    .fn()
    .mockName('tokStop')
    .mockReturnValue('stop');
var mockMetadata = jest
    .fn()
    .mockName('metadata')
    .mockReturnValue('metadata');
var mockList = jest
    .fn()
    .mockName('list')
    .mockImplementation(function (data) {
    if (data && data.clouds.token) {
        return { token: testCloudToken };
    }
    return data;
});
var mockLogout = jest
    .fn()
    .mockName('logout')
    .mockImplementation(function (url, params) {
    if (params.clouds && params.clouds.token) {
        return { token: testCloudToken };
    }
    return params;
});
var mockStore = jest
    .fn()
    .mockName('store')
    .mockImplementation(function (params) {
    if (params && params.clouds && params.clouds.token) {
        return JSON.stringify({ token: testCloudToken });
    }
    return JSON.stringify(params);
});
describe('cloud', function () {
    beforeEach(function () {
        scope
            .persist()
            .options(/.*/)
            .reply(204, '', {
            'access-control-allow-headers': 'filestack-source,filestack-trace-id,filestack-trace-span',
            'access-control-allow-methods': '*',
            'access-control-allow-origin': '*',
        });
        scope.post('/auth/logout').reply(200, mockLogout);
        scope.post('/folder/list').reply(200, function (_, data) { return mockList(data); });
        scope.post('/store/').reply(200, function (_, data) { return mockStore(data); });
        scope.post('/metadata').reply(200, mockMetadata);
        scope.post(/\/recording\/(audio|video)\/init/).reply(200, mockTokInit);
        scope.post(/\/recording\/(audio|video)\/start/).reply(200, mockTokStart);
        scope.post(/\/recording\/(audio|video)\/stop/).reply(200, mockTokStop);
    });
    afterEach(function () {
        nock.cleanAll();
        jest.clearAllMocks();
        localStorage.clear();
    });
    describe('cancelToken', function () {
        var testDomain = 'http://delay.filestack.test';
        var scopeD;
        beforeEach(function () {
            scopeD = nock(testDomain);
            scopeD
                .post('/store/')
                .delay(4000)
                .reply(200);
            scopeD
                .post('/folder/list')
                .delay(4000)
                .reply(200);
            scopeD
                .persist()
                .options(/.*/)
                .reply(204, '', {
                'access-control-allow-headers': 'filestack-source,filestack-trace-id,filestack-trace-span',
                'access-control-allow-methods': '*',
                'access-control-allow-origin': '*',
            });
        });
        afterEach(function () {
            nock.cleanAll();
            jest.clearAllMocks();
            localStorage.clear();
        });
        it('Should cancel store request', function (done) {
            var sessionClone = JSON.parse(JSON.stringify(testSession));
            sessionClone.urls.cloudApiUrl = testDomain;
            var token = {};
            new CloudClient(sessionClone)
                .store('google', 'test', { filename: '1', location: 'gcs' }, {}, token)
                .then(function () {
                done('Request not canceled');
            })
                .catch(function (err) {
                expect(err).toEqual(expect.any(Error));
                done();
            });
            setTimeout(function () {
                // @ts-ignore
                token.cancel();
            }, 500);
        });
        it('Should cancel list request', function (done) {
            var sessionClone = JSON.parse(JSON.stringify(testSession));
            sessionClone.urls.cloudApiUrl = testDomain;
            var token = {};
            new CloudClient(sessionClone)
                .list('google', token)
                .then(function () {
                done('Request not canceled');
            })
                .catch(function (err) {
                expect(err).toEqual(expect.any(Error));
                done();
            });
            setTimeout(function () {
                // @ts-ignore
                token.cancel();
            }, 500);
        });
    });
    describe('facebook inapp browser', function () {
        it('should set token to sessionStore when inapp browser is detected', function () { return __awaiter(void 0, void 0, void 0, function () {
            var client, token;
            return __generator(this, function (_a) {
                spyOn(utils, 'isFacebook').and.returnValue(true);
                client = new CloudClient(Object.assign({}, testSession, {
                    prefetch: {
                        settings: {
                            inapp_browser: true,
                        },
                    },
                }));
                token = 'test';
                client.token = token;
                expect(sessionStorage.getItem(PICKER_KEY)).toEqual(token);
                sessionStorage.setItem(PICKER_KEY, undefined);
                return [2 /*return*/];
            });
        }); });
        it('should get token from sessionStore when inapp browser is detected', function () { return __awaiter(void 0, void 0, void 0, function () {
            var client, token;
            return __generator(this, function (_a) {
                spyOn(utils, 'isFacebook').and.returnValue(true);
                client = new CloudClient(Object.assign({}, testSession, {
                    prefetch: {
                        settings: {
                            inapp_browser: true,
                        },
                    },
                }));
                token = 'test';
                sessionStorage.setItem(PICKER_KEY, token);
                expect(client.token).toEqual(token);
                sessionStorage.setItem(PICKER_KEY, undefined);
                return [2 /*return*/];
            });
        }); });
        it('should send appurl in list action', function () { return __awaiter(void 0, void 0, void 0, function () {
            var clouds, client, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clouds = { test: true };
                        client = new CloudClient(Object.assign({}, testSession, {
                            prefetch: {
                                settings: {
                                    inapp_browser: true,
                                },
                            },
                        }));
                        return [4 /*yield*/, client.list(__assign({}, clouds))];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual({
                            apikey: testApiKey,
                            flow: 'web',
                            appurl: 'http://localhost/?fs-tab=init',
                            clouds: clouds,
                            token: null,
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    it('should not send app url if urlsearch params is undefined', function () { return __awaiter(void 0, void 0, void 0, function () {
        var clouds, before, client, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    clouds = { test: true };
                    before = window.URLSearchParams;
                    window.URLSearchParams = undefined;
                    client = new CloudClient(Object.assign({}, testSession, {
                        prefetch: {
                            settings: {
                                inapp_browser: true,
                            },
                        },
                    }));
                    return [4 /*yield*/, client.list(__assign({}, clouds))];
                case 1:
                    res = _a.sent();
                    expect(res).toEqual({
                        apikey: testApiKey,
                        flow: 'web',
                        clouds: clouds,
                        token: null,
                    });
                    window.URLSearchParams = before;
                    return [2 /*return*/];
            }
        });
    }); });
    describe('list', function () {
        it('should make correct list request', function () { return __awaiter(void 0, void 0, void 0, function () {
            var clouds, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clouds = { test: true };
                        return [4 /*yield*/, new CloudClient(testSession).list(__assign({}, clouds))];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual({
                            apikey: testApiKey,
                            flow: 'web',
                            clouds: clouds,
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should make correct list request with session cache', function () { return __awaiter(void 0, void 0, void 0, function () {
            var clouds, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clouds = { test: true };
                        localStorage.setItem(PICKER_KEY, testCloudToken);
                        return [4 /*yield*/, new CloudClient(testSession, {
                                sessionCache: true,
                            }).list(__assign({}, clouds))];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual({
                            apikey: testApiKey,
                            flow: 'web',
                            token: testCloudToken,
                            clouds: clouds,
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should set token on api token response', function () { return __awaiter(void 0, void 0, void 0, function () {
            var clouds, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clouds = { token: true };
                        return [4 /*yield*/, new CloudClient(testSession).list(__assign({}, clouds))];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual({ token: testCloudToken });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should cache session token to local storage', function () { return __awaiter(void 0, void 0, void 0, function () {
            var clouds, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clouds = { token: true };
                        return [4 /*yield*/, new CloudClient(testSession, { sessionCache: true }).list(__assign({}, clouds))];
                    case 1:
                        res = _a.sent();
                        expect(localStorage.setItem).toHaveBeenCalledWith(PICKER_KEY, testCloudToken);
                        expect(res).toEqual({ token: testCloudToken });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should make correct list request with security', function () { return __awaiter(void 0, void 0, void 0, function () {
            var clouds, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clouds = { test: true };
                        return [4 /*yield*/, new CloudClient(__assign(__assign({}, testSession), testSecurity)).list(__assign({}, clouds))];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual(__assign({ apikey: testApiKey, flow: 'web', clouds: clouds }, testSecurity));
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('store', function () {
        it('should make correct basic request', function () { return __awaiter(void 0, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new CloudClient(testSession).store('google', 'test', { filename: '1' })];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual({
                            apikey: testApiKey,
                            flow: 'web',
                            clouds: {
                                google: {
                                    path: 'test',
                                    store: {
                                        filename: '1',
                                        location: 's3',
                                    },
                                },
                            },
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should respect store location param', function () { return __awaiter(void 0, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new CloudClient(testSession).store('google', 'test', { filename: '1', location: 'gcs' })];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual({
                            apikey: testApiKey,
                            flow: 'web',
                            clouds: {
                                google: {
                                    path: 'test',
                                    store: {
                                        filename: '1',
                                        location: 'gcs',
                                    },
                                },
                            },
                        });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should make correct basic with security', function () { return __awaiter(void 0, void 0, void 0, function () {
            var res, excepted;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new CloudClient(__assign(__assign({}, testSession), testSecurity)).store('token', 'test', { filename: '1' })];
                    case 1:
                        res = _a.sent();
                        excepted = __assign(__assign({}, testSecurity), { apikey: testApiKey, flow: 'web', clouds: {
                                token: {
                                    path: 'test',
                                    store: {
                                        filename: '1',
                                        location: 's3',
                                    },
                                },
                            } });
                        expect(mockStore).toHaveBeenCalledWith(excepted);
                        expect(res).toEqual(testCloudToken);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should handle custom source', function () { return __awaiter(void 0, void 0, void 0, function () {
            var customSource, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        customSource = {
                            customSourcePath: 'cs_path',
                            customSourceContainer: 'cs_container',
                        };
                        return [4 /*yield*/, new CloudClient(testSession).store('customsource', 'test', { filename: '1' }, customSource)];
                    case 1:
                        res = _a.sent();
                        expect(res).toEqual({
                            apikey: testApiKey,
                            flow: 'web',
                            clouds: {
                                customsource: __assign(__assign({}, customSource), { path: 'test', store: {
                                        filename: '1',
                                        location: 's3',
                                    } }),
                            },
                        });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('logout', function () {
        it('should make correct request to logout', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, new CloudClient(testSession).logout()];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual({ apikey: 'API_KEY', flow: 'web' });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should make correct request to logout with provided cloud', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, new CloudClient(testSession).logout('google')];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual({ apikey: 'API_KEY', flow: 'web', clouds: { google: {} } });
                        return [2 /*return*/];
                }
            });
        }); });
        it('should make correct request to logout and return correct response when cloud name is returned', function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = expect;
                        return [4 /*yield*/, new CloudClient(testSession).logout('token')];
                    case 1:
                        _a.apply(void 0, [_b.sent()]).toEqual('testCloudToken');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should make correct request to logout and clean session cache ', function () { return __awaiter(void 0, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        localStorage.setItem(PICKER_KEY, testCloudToken);
                        return [4 /*yield*/, new CloudClient(testSession, { sessionCache: true }).logout()];
                    case 1:
                        res = _a.sent();
                        expect(localStorage.removeItem).toHaveBeenCalledWith(PICKER_KEY);
                        expect(res).toEqual({ apikey: 'API_KEY', flow: 'web', token: testCloudToken });
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('metadata', function () {
        it('should make correct request', function () { return __awaiter(void 0, void 0, void 0, function () {
            var testUrl, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        testUrl = 'http://test.com';
                        return [4 /*yield*/, new CloudClient(testSession).metadata(testUrl)];
                    case 1:
                        res = _a.sent();
                        expect(mockMetadata).toHaveBeenCalledWith(expect.any(String), {
                            apikey: testApiKey,
                            url: testUrl,
                        });
                        expect(res).toEqual('metadata');
                        return [2 /*return*/];
                }
            });
        }); });
        it('should make correct request with security', function () { return __awaiter(void 0, void 0, void 0, function () {
            var testUrl, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        testUrl = 'http://test.com';
                        return [4 /*yield*/, new CloudClient(__assign(__assign({}, testSession), testSecurity)).metadata(testUrl)];
                    case 1:
                        res = _a.sent();
                        expect(mockMetadata).toHaveBeenCalledWith(expect.any(String), __assign({ apikey: testApiKey, url: testUrl }, testSecurity));
                        expect(res).toEqual('metadata');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('OpenTok', function () {
        describe('tokInit', function () {
            it('should make correct request to api (audio)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new CloudClient(testSession).tokInit('audio')];
                        case 1:
                            res = _a.sent();
                            expect(mockTokInit).toHaveBeenCalledWith(expect.any(String), '');
                            expect(res).toEqual('init');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should make correct request to api (video)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new CloudClient(testSession).tokInit('audio')];
                        case 1:
                            res = _a.sent();
                            expect(mockTokInit).toHaveBeenCalledWith(expect.any(String), '');
                            expect(res).toEqual('init');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should throw on wrong type', function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    expect(function () {
                        new CloudClient(testSession)
                            .tokInit('videoa')
                            .then(function () {
                            console.log('init');
                        })
                            .catch(function () {
                            console.log('err');
                        });
                    }).toThrowError();
                    return [2 /*return*/];
                });
            }); });
        });
        describe('tokStart', function () {
            it('should make correct request to api (audio)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new CloudClient(testSession).tokStart('audio', 'key', testTokSession)];
                        case 1:
                            res = _a.sent();
                            expect(mockTokStart).toHaveBeenCalledWith(expect.any(String), { apikey: 'key', session_id: testTokSession });
                            expect(res).toEqual('start');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should make correct request to api (video)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new CloudClient(testSession).tokStart('video', 'key', testTokSession)];
                        case 1:
                            res = _a.sent();
                            expect(mockTokStart).toHaveBeenCalledWith(expect.any(String), { apikey: 'key', session_id: testTokSession });
                            expect(res).toEqual('start');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should throw on wrong type', function () {
                expect(function () { return new CloudClient(testSession).tokStart('videoa', 'key', testTokSession); }).toThrowError();
            });
        });
        describe('tokStop', function () {
            it('should make correct request to api (audio)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new CloudClient(testSession).tokStop('audio', 'key', testTokSession, testTokArchiveId)];
                        case 1:
                            res = _a.sent();
                            expect(mockTokStop).toHaveBeenCalledWith(expect.any(String), {
                                apikey: 'key',
                                session_id: testTokSession,
                                archive_id: testTokArchiveId,
                            });
                            expect(res).toEqual('stop');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should make correct request to api (video)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new CloudClient(testSession).tokStop('video', 'key', testTokSession, testTokArchiveId)];
                        case 1:
                            res = _a.sent();
                            expect(mockTokStop).toHaveBeenCalledWith(expect.any(String), {
                                apikey: 'key',
                                session_id: testTokSession,
                                archive_id: testTokArchiveId,
                            });
                            expect(res).toEqual('stop');
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should throw on wrong type', function () {
                expect(function () { return new CloudClient(testSession).tokStop('videoa', 'key', testTokSession, testTokArchiveId); }).toThrowError();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
