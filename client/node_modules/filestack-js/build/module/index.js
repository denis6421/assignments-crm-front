/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { registerModule, FILESTACK_MODULES } from '@filestack/loader';
import { getSecurity, validateWebhookSignature } from './lib/api/security';
import { Client } from './lib/client';
import { PickerDisplayMode } from './lib/picker';
import { TransformSchema } from './schema/transforms.schema';
import { PrefetchEvents } from './lib/api/prefetch';
import { FilestackError } from './filestack_error';
import { getMimetype } from './lib/utils/index';
/**
 * Initialize client with given config
 *
 * @param apikey
 * @param options
 */
export var Filestack = function (apikey, options) {
    return new Client(apikey, options);
};
// This will be deprecated in feature use
export var init = Filestack;
/**
 * filestack-js version. Interpolated at build time.
 */
export var version = '3.13.2';
registerModule(FILESTACK_MODULES.FILESTACK_SDK, Filestack, { version: '3.13.2' });
export * from './lib/api/transform';
export * from './lib/filelink';
export * from './filestack_error';
export * from './lib/request';
export * from './lib/utils';
export { TransformSchema, getSecurity, validateWebhookSignature, Client, FilestackError, PickerDisplayMode, getMimetype, PrefetchEvents };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxPQUFPLEVBQUUsY0FBYyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEUsT0FBTyxFQUFtQixXQUFXLEVBQUUsd0JBQXdCLEVBQTBCLE1BQU0sb0JBQW9CLENBQUM7QUFDcEgsT0FBTyxFQUFFLE1BQU0sRUFBMkIsTUFBTSxjQUFjLENBQUM7QUFDL0QsT0FBTyxFQUErRixpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5SSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFPN0QsT0FBTyxFQUEwRCxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWhEOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLFVBQUMsTUFBYyxFQUFFLE9BQXVCO0lBQy9ELE9BQU8sSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQUVGLHlDQUF5QztBQUN6QyxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDO0FBRTlCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLFlBQVksQ0FBQztBQUVwQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBRXRGLGNBQWMscUJBQXFCLENBQUM7QUFDcEMsY0FBYyxnQkFBZ0IsQ0FBQztBQUMvQixjQUFjLG1CQUFtQixDQUFDO0FBQ2xDLGNBQWMsZUFBZSxDQUFDO0FBQzlCLGNBQWMsYUFBYSxDQUFDO0FBRTVCLE9BQU8sRUFDTCxlQUFlLEVBRWYsV0FBVyxFQUNYLHdCQUF3QixFQWdCeEIsTUFBTSxFQUNOLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsV0FBVyxFQUlYLGNBQWMsRUFDZixDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOCBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IHJlZ2lzdGVyTW9kdWxlLCBGSUxFU1RBQ0tfTU9EVUxFUyB9IGZyb20gJ0BmaWxlc3RhY2svbG9hZGVyJztcbmltcG9ydCB7IFNlY3VyaXR5T3B0aW9ucywgZ2V0U2VjdXJpdHksIHZhbGlkYXRlV2ViaG9va1NpZ25hdHVyZSwgV2ViaG9va1ZhbGlkYXRlUGF5bG9hZCB9IGZyb20gJy4vbGliL2FwaS9zZWN1cml0eSc7XG5pbXBvcnQgeyBDbGllbnQsIENsaWVudE9wdGlvbnMsIFNlY3VyaXR5IH0gZnJvbSAnLi9saWIvY2xpZW50JztcbmltcG9ydCB7IFBpY2tlck9wdGlvbnMsIFBpY2tlckluc3RhbmNlLCBQaWNrZXJVcGxvYWREb25lQ2FsbGJhY2ssIFBpY2tlckZpbGVNZXRhZGF0YSwgUGlja2VyUmVzcG9uc2UsIFBpY2tlckRpc3BsYXlNb2RlIH0gZnJvbSAnLi9saWIvcGlja2VyJztcbmltcG9ydCB7IFRyYW5zZm9ybVNjaGVtYSB9IGZyb20gJy4vc2NoZW1hL3RyYW5zZm9ybXMuc2NoZW1hJztcbmltcG9ydCB7IFRyYW5zZm9ybU9wdGlvbnMgfSBmcm9tICcuL2xpYi9hcGkvdHJhbnNmb3JtJztcbmltcG9ydCB7IFJldHJpZXZlT3B0aW9ucywgTWV0YWRhdGFPcHRpb25zIH0gZnJvbSAnLi9saWIvYXBpL2ZpbGUnO1xuaW1wb3J0IHsgSW5wdXRGaWxlIH0gZnJvbSAnLi9saWIvYXBpL3VwbG9hZC9maWxlX3Rvb2xzJztcbmltcG9ydCB7IFVwbG9hZE9wdGlvbnMgfSBmcm9tICcuL2xpYi9hcGkvdXBsb2FkL3R5cGVzJztcbmltcG9ydCB7IFN0b3JlVXBsb2FkT3B0aW9ucyB9IGZyb20gJy4vbGliL2FwaS91cGxvYWQnO1xuaW1wb3J0IHsgUHJldmlld09wdGlvbnMgfSBmcm9tICcuL2xpYi9hcGkvcHJldmlldyc7XG5pbXBvcnQgeyBQcmVmZXRjaE9wdGlvbnMsIFByZWZldGNoUmVzcG9uc2UsIFByZWZldGNoUGVybWlzc2lvbnMsIFByZWZldGNoRXZlbnRzIH0gZnJvbSAnLi9saWIvYXBpL3ByZWZldGNoJztcbmltcG9ydCB7IEZpbGVzdGFja0Vycm9yIH0gZnJvbSAnLi9maWxlc3RhY2tfZXJyb3InO1xuaW1wb3J0IHsgZ2V0TWltZXR5cGUgfSBmcm9tICcuL2xpYi91dGlscy9pbmRleCc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBjbGllbnQgd2l0aCBnaXZlbiBjb25maWdcbiAqXG4gKiBAcGFyYW0gYXBpa2V5XG4gKiBAcGFyYW0gb3B0aW9uc1xuICovXG5leHBvcnQgY29uc3QgRmlsZXN0YWNrID0gKGFwaWtleTogc3RyaW5nLCBvcHRpb25zPzogQ2xpZW50T3B0aW9ucyk6IENsaWVudCA9PiB7XG4gIHJldHVybiBuZXcgQ2xpZW50KGFwaWtleSwgb3B0aW9ucyk7XG59O1xuXG4vLyBUaGlzIHdpbGwgYmUgZGVwcmVjYXRlZCBpbiBmZWF0dXJlIHVzZVxuZXhwb3J0IGNvbnN0IGluaXQgPSBGaWxlc3RhY2s7XG5cbi8qKlxuICogZmlsZXN0YWNrLWpzIHZlcnNpb24uIEludGVycG9sYXRlZCBhdCBidWlsZCB0aW1lLlxuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICdAe1ZFUlNJT059JztcblxucmVnaXN0ZXJNb2R1bGUoRklMRVNUQUNLX01PRFVMRVMuRklMRVNUQUNLX1NESywgRmlsZXN0YWNrLCB7IHZlcnNpb246ICdAe1ZFUlNJT059JyB9KTtcblxuZXhwb3J0ICogZnJvbSAnLi9saWIvYXBpL3RyYW5zZm9ybSc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9maWxlbGluayc7XG5leHBvcnQgKiBmcm9tICcuL2ZpbGVzdGFja19lcnJvcic7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9yZXF1ZXN0JztcbmV4cG9ydCAqIGZyb20gJy4vbGliL3V0aWxzJztcblxuZXhwb3J0IHtcbiAgVHJhbnNmb3JtU2NoZW1hLFxuICBTZWN1cml0eU9wdGlvbnMsXG4gIGdldFNlY3VyaXR5LFxuICB2YWxpZGF0ZVdlYmhvb2tTaWduYXR1cmUsXG4gIFdlYmhvb2tWYWxpZGF0ZVBheWxvYWQsXG4gIENsaWVudE9wdGlvbnMsXG4gIFBpY2tlck9wdGlvbnMsXG4gIFBpY2tlckluc3RhbmNlLFxuICBTZWN1cml0eSxcbiAgVHJhbnNmb3JtT3B0aW9ucyxcbiAgUmV0cmlldmVPcHRpb25zLFxuICBJbnB1dEZpbGUsXG4gIFVwbG9hZE9wdGlvbnMsXG4gIFN0b3JlVXBsb2FkT3B0aW9ucyxcbiAgTWV0YWRhdGFPcHRpb25zLFxuICBQcmV2aWV3T3B0aW9ucyxcbiAgUGlja2VyVXBsb2FkRG9uZUNhbGxiYWNrLFxuICBQaWNrZXJGaWxlTWV0YWRhdGEsXG4gIFBpY2tlclJlc3BvbnNlLFxuICBDbGllbnQsXG4gIEZpbGVzdGFja0Vycm9yLFxuICBQaWNrZXJEaXNwbGF5TW9kZSxcbiAgZ2V0TWltZXR5cGUsXG4gIFByZWZldGNoT3B0aW9ucyxcbiAgUHJlZmV0Y2hSZXNwb25zZSxcbiAgUHJlZmV0Y2hQZXJtaXNzaW9ucyxcbiAgUHJlZmV0Y2hFdmVudHNcbn07XG4iXX0=
