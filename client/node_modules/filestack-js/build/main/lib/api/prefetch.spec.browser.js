"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// import { config } from './../../config';
var nock = require("nock");
var prefetch_1 = require("./prefetch");
var request_1 = require("../request");
var testApiKey = 'AHv2222222222444444uez';
var testSecurity = {
    policy: 'examplePolicy',
    signature: 'exampleSignature',
};
var testURL = {
    fileApiUrl: '',
    uploadApiUrl: 'https://uploadtesturl-fs.com',
    cloudApiUrl: '',
    cdnUrl: '',
    pickerUrl: '',
};
var testSession = {
    apikey: testApiKey,
    urls: testURL,
};
var scope = nock(testURL.uploadApiUrl);
// mock cors responses for all request for browser tests
scope.defaultReplyHeaders({
    'access-control-allow-origin': function (req) { return req.headers['origin']; },
    'access-control-allow-methods': function (req) { return req.headers['access-control-request-method']; },
    'access-control-allow-headers': function (req) { return req.headers['access-control-request-headers']; },
    'content-type': 'application/json',
});
describe('Prefetch', function () {
    beforeEach(function () {
        scope
            .options(/.*/)
            .reply(204);
    });
    it('Should make correct request to prefetch and return new config', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, serverResponse, test, prefetch, res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = tslib_1.__assign({}, testSession);
                    serverResponse = {
                        blocked: false,
                        settings: {
                            customsource: false,
                            inapp_browser: false,
                        },
                        permissions: {
                            transforms_ui: false,
                        },
                        updated_config: {
                            fromSources: ['googledrive'],
                        },
                    };
                    scope.post('/prefetch').once().reply(200, serverResponse);
                    test = function () { return 2; };
                    prefetch = new prefetch_1.Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({
                            pickerOptions: {
                                // @ts-ignore
                                onFileSelected: test,
                                fromSources: ['googledrive', 'test'],
                            },
                        })];
                case 1:
                    res = _a.sent();
                    expect(res.pickerOptions.onFileSelected).toEqual(test);
                    expect(res.pickerOptions.fromSources).toEqual(['googledrive']);
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should set correct params to sessions (prefetch)', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, serverResponse, prefetch, res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = tslib_1.__assign({}, testSession);
                    serverResponse = {
                        blocked: false,
                        settings: {
                            customsource: false,
                            inapp_browser: true,
                        },
                        permissions: {
                            transforms_ui: true,
                        },
                        updated_config: {
                            fromSources: ['googledrive'],
                        },
                    };
                    scope.post('/prefetch').once().reply(200, serverResponse);
                    prefetch = new prefetch_1.Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({
                            pickerOptions: {
                                fromSources: ['facebook', 'test'],
                            },
                        })];
                case 1:
                    res = _a.sent();
                    expect(sessionCopy.prefetch).toEqual(expect.any(Object));
                    expect(sessionCopy.prefetch.settings.inapp_browser).toEqual(true);
                    expect(sessionCopy.prefetch.permissions.transforms_ui).toEqual(true);
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw error when response code is other thant 200', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, prefetch, err_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    sessionCopy = tslib_1.__assign({}, testSession);
                    prefetch = new prefetch_1.Prefetch(sessionCopy);
                    scope.post('/prefetch').once().reply(500);
                    return [4 /*yield*/, prefetch.getConfig({})];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    expect(err_1.code).toEqual(request_1.FsRequestErrorCode.SERVER);
                    return [3 /*break*/, 3];
                case 3:
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should add security to request when provided', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, mockPref, prefetch, res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = tslib_1.__assign(tslib_1.__assign({}, testSession), { signature: testSecurity.signature, policy: testSecurity.policy });
                    mockPref = jest.fn().mockImplementation(function () { return ({}); });
                    scope.post('/prefetch').once().reply(200, function (_, data) { return mockPref(data); });
                    prefetch = new prefetch_1.Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({
                            pickerOptions: {},
                        })];
                case 1:
                    res = _a.sent();
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        settings: ['inapp_browser'],
                        security: {
                            signature: testSecurity.signature,
                            policy: testSecurity.policy,
                        },
                    });
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should always add inapp browser setting to request', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var mockPref, prefetch;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockPref = jest.fn().mockImplementation(function () { return ({}); });
                    scope.post('/prefetch').once().reply(200, function (_, data) { return mockPref(data); });
                    prefetch = new prefetch_1.Prefetch(tslib_1.__assign({}, testSession));
                    return [4 /*yield*/, prefetch.getConfig({})];
                case 1:
                    _a.sent();
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        settings: ['inapp_browser'],
                    });
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should always add inapp browser setting to request event if some settings are provided', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var mockPref, prefetch;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockPref = jest.fn().mockImplementation(function () { return ({}); });
                    scope.post('/prefetch').once().reply(200, function (_, data) { return mockPref(data); });
                    prefetch = new prefetch_1.Prefetch(tslib_1.__assign({}, testSession));
                    return [4 /*yield*/, prefetch.getConfig({ settings: ['inapp_browser'] })];
                case 1:
                    _a.sent();
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        settings: ['inapp_browser'],
                    });
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should return old config when updated_config is missing in response', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, pickerOptions, prefetch, res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = tslib_1.__assign(tslib_1.__assign({}, testSession), { signature: testSecurity.signature, policy: testSecurity.policy });
                    scope.post('/prefetch').once().reply(200, {
                        blocked: true,
                    });
                    pickerOptions = {
                        uploadInBackground: true,
                        onUploadDone: function () { return console.log; },
                        storeTo: {
                            location: 'asd',
                        },
                    };
                    prefetch = new prefetch_1.Prefetch(sessionCopy);
                    return [4 /*yield*/, prefetch.getConfig({ pickerOptions: pickerOptions })];
                case 1:
                    res = _a.sent();
                    expect(res.pickerOptions).toEqual(pickerOptions);
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should send only events when config is already prefetched', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var sessionCopy, mockPref, prefetch, toSend;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    sessionCopy = tslib_1.__assign({}, testSession);
                    mockPref = jest.fn().mockImplementation(function () { return ({}); });
                    scope.post('/prefetch').twice().reply(200, function (_, data) { return mockPref(data); });
                    prefetch = new prefetch_1.Prefetch(sessionCopy);
                    toSend = {
                        events: [prefetch_1.PrefetchEvents.PICKER],
                        pickerOptions: {
                            uploadInBackground: true,
                        },
                    };
                    return [4 /*yield*/, prefetch.getConfig(toSend)];
                case 1:
                    _a.sent();
                    // add one more options request for second request
                    scope
                        .options(/.*/)
                        .reply(204);
                    return [4 /*yield*/, prefetch.getConfig(toSend)];
                case 2:
                    _a.sent();
                    expect(mockPref).toHaveBeenCalledTimes(2);
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        events: [prefetch_1.PrefetchEvents.PICKER],
                        settings: ['inapp_browser'],
                        picker_config: {
                            uploadInBackground: true,
                        },
                    });
                    expect(mockPref).toHaveBeenCalledWith({
                        apikey: testApiKey,
                        events: [prefetch_1.PrefetchEvents.PICKER],
                    });
                    scope.done();
                    return [2 /*return*/];
            }
        });
    }); });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
