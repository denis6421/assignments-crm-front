{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/front/client/src/components/settings/categories/system/SystemSettings.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../../actions/actions\";\nimport { apiPostRequest } from \"../../../../tools/api\";\nimport SelectBox from \"../../../../parts/SelectBox\";\nimport IsraelImg from \"../../../../images/flags/israel.svg\";\nimport UsaImg from \"../../../../images/flags/usa.svg\";\nimport SystemLoader from \"./SystemLoader\";\nimport { Link } from 'react-router-dom';\nimport { SETTINGS_ROUTE, EMPLOYEE_DASHBOARD_SETTINGS } from \"../../../../tools/routes\";\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nconst languages = [{\n  name: \"English\",\n  value: \"english\",\n  img: UsaImg\n}, {\n  name: \"Hebrew\",\n  value: \"hebrew\",\n  img: IsraelImg\n}];\n\nclass SystemSettings extends Component {\n  constructor() {\n    super();\n\n    this.changeLanguage = async language => {\n      const user = this.props.user.user;\n      const api = \"account-settings/update\";\n      this.setState({\n        loading: true\n      });\n      setTimeout(async () => {\n        const body = {\n          user: user._id,\n          language: language.value\n        };\n\n        try {\n          await apiPostRequest(api, body).then(res => {\n            this.props.setSystemLanguage(res.result.language);\n            let selected = languages.filter(m => m.value === res.result.language)[0];\n            this.setState({\n              selected\n            });\n          });\n        } catch (error) {}\n      }, 500);\n    };\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const language = this.props.global.language;\n    let selected = languages.filter(m => m.value === language)[0];\n    console.log(selected, language);\n    this.setState({\n      selected\n    });\n  }\n\n  render() {\n    const system_text = this.props.global.system_text;\n    const _this$state = this.state,\n          selected = _this$state.selected,\n          loading = _this$state.loading;\n    const user = this.props.user.user;\n    return React.createElement(\"div\", {\n      className: \"settings__system\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"sticky__top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Link, {\n      className: \"back__button flex__start\",\n      to: user.is_manager ? SETTINGS_ROUTE : EMPLOYEE_DASHBOARD_SETTINGS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(NavigateBeforeIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), system_text.SETTINGS)), loading ? React.createElement(SystemLoader, {\n      text: system_text.LANGUAGE_LOADING,\n      close: () => this.setState({\n        loading: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }) : '', React.createElement(\"section\", {\n      className: \"settings__system__section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, system_text.LANGUAGE_SELECT), React.createElement(SelectBox, {\n      value: selected,\n      options: languages,\n      handleSelect: this.changeLanguage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction mapStateToProps({\n  user,\n  global\n}) {\n  return {\n    user,\n    global\n  };\n}\n\nexport default connect(mapStateToProps, actions)(SystemSettings);","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/front/client/src/components/settings/categories/system/SystemSettings.jsx"],"names":["React","Component","connect","actions","apiPostRequest","SelectBox","SystemLoader","Link","SETTINGS_ROUTE","EMPLOYEE_DASHBOARD_SETTINGS","NavigateBeforeIcon","languages","name","value","img","UsaImg","IsraelImg","SystemSettings","constructor","changeLanguage","language","user","props","api","setState","loading","setTimeout","body","_id","then","res","setSystemLanguage","result","selected","filter","m","error","state","componentDidMount","global","console","log","render","system_text","is_manager","SETTINGS","LANGUAGE_LOADING","LANGUAGE_SELECT","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../../actions/actions\";\nimport { apiPostRequest } from \"../../../../tools/api\";\nimport SelectBox from \"../../../../parts/SelectBox\";\nimport IsraelImg from \"../../../../images/flags/israel.svg\";\nimport UsaImg from \"../../../../images/flags/usa.svg\";\nimport SystemLoader from \"./SystemLoader\";\nimport {Link} from 'react-router-dom'\nimport { SETTINGS_ROUTE, EMPLOYEE_DASHBOARD_SETTINGS } from \"../../../../tools/routes\";\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nconst languages = [\n  { name: \"English\", value: \"english\", img: UsaImg },\n  { name: \"Hebrew\", value: \"hebrew\", img: IsraelImg },\n];\nclass SystemSettings extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const { language } = this.props.global;\n    let selected = languages.filter((m) => m.value === language)[0];\n    console.log(selected, language);\n    this.setState({\n      selected,\n    });\n  }\n  changeLanguage = async (language) => {\n    const { user } = this.props.user;\n    const api = \"account-settings/update\";\n    this.setState({\n        loading:true\n       })\n    setTimeout(async () => {\n        const body = {\n            user: user._id,\n            language: language.value,\n          };\n          try {\n            \n            await apiPostRequest(api, body).then((res) => {\n              this.props.setSystemLanguage(res.result.language);\n              let selected = languages.filter(\n                (m) => m.value === res.result.language\n              )[0];\n              this.setState({\n                selected,\n              });\n              \n            });\n          } catch (error) {\n            \n          }\n    }, 500);\n\n  };\n\n\n  render() {\n    const { system_text } = this.props.global;\n    const { selected, loading } = this.state;\n    const {user} =this.props.user\n    return (\n      <div className=\"settings__system\">\n          <header className='sticky__top'>\n        <Link\n        className='back__button flex__start'\n        to ={user.is_manager ? SETTINGS_ROUTE  :EMPLOYEE_DASHBOARD_SETTINGS}>\n          <NavigateBeforeIcon />{system_text.SETTINGS}\n        </Link>\n        </header>\n       {loading ? <SystemLoader\n       text = {system_text.LANGUAGE_LOADING}\n       close = {() => this.setState({loading:false})}\n       /> : ''}\n        <section className=\"settings__system__section\">\n          <h2>{system_text.LANGUAGE_SELECT}</h2>\n          <SelectBox\n            value={selected}\n            options={languages}\n            handleSelect={this.changeLanguage}\n          />\n        </section>\n      </div>\n    );\n  }\n}\nfunction mapStateToProps({ user, global }) {\n  return { user, global };\n}\n\nexport default connect(mapStateToProps, actions)(SystemSettings);\n"]},"metadata":{},"sourceType":"module"}