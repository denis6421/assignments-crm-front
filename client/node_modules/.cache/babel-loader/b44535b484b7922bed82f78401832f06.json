{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/front/client/src/parts/inputs/TextInput.jsx\";\nimport React, { Component } from \"react\";\nimport validator from \"validator\";\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions/actions';\n\nconst validateInput = (type, value) => {\n  switch (type) {\n    case \"email\":\n      return !validator.isEmail(value);\n\n    case \"phone\":\n      return !validator.isMobilePhone(String(value));\n\n    default:\n      break;\n  }\n};\n\nclass TextInput extends Component {\n  constructor() {\n    super();\n\n    this.handleChnage = value => {\n      const input = this.props.input;\n      const property_name = input.property_name,\n            type = input.type;\n\n      if (type === \"phone\") {\n        let num = value.replace(/[^0-9.]/g, \"\");\n        this.props.handleUpdate(property_name, num);\n      } else {\n        this.props.handleUpdate(property_name, value);\n      }\n    };\n\n    this.handleBlur = () => {\n      const _this$props = this.props,\n            value = _this$props.value,\n            input = _this$props.input;\n      const type = input.type,\n            required = input.required;\n      let validation_error, error;\n      this.setState({\n        active: value\n      });\n\n      if (value) {\n        validation_error = validateInput(type, value);\n      } else {\n        if (required) error = true;\n      }\n\n      this.setState({\n        validation_error,\n        error\n      });\n    };\n\n    this.handleFocus = () => {\n      this.setState({\n        active: true,\n        validation_error: false,\n        error: false\n      });\n    };\n\n    this.state = {};\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const _this$props2 = this.props,\n          validate = _this$props2.validate,\n          input = _this$props2.input,\n          value = _this$props2.value;\n    const type = input.type,\n          required = input.required;\n\n    if (nextProps.validate !== validate && required) {\n      this.handleBlur(type, value);\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          input = _this$props3.input,\n          value = _this$props3.value;\n    const empty_text = input.empty_text,\n          validation_text = input.validation_text,\n          label = input.label,\n          type = input.type;\n    const _this$state = this.state,\n          active = _this$state.active,\n          error = _this$state.error,\n          validation_error = _this$state.validation_error;\n    const system_text = this.props.global.system_text;\n    return React.createElement(\"div\", {\n      className: active || value ? \"text__input text__input--active\" : \"text__input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: type === \"password\" ? \"password\" : \"text\",\n      onChange: e => this.handleChnage(e.target.value),\n      onBlur: e => this.handleBlur(),\n      onFocus: e => this.handleFocus(),\n      placeholder: system_text[label],\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), error ? React.createElement(\"p\", {\n      className: \"text__input__error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, system_text[empty_text]) : validation_error ? React.createElement(\"p\", {\n      className: \"text__input__error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, system_text[validation_text]) : null);\n  }\n\n}\n\nfunction mapStateToProps({\n  global\n}) {\n  return {\n    global\n  };\n}\n\nexport default connect(mapStateToProps, actions)(TextInput);","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/front/client/src/parts/inputs/TextInput.jsx"],"names":["React","Component","validator","connect","actions","validateInput","type","value","isEmail","isMobilePhone","String","TextInput","constructor","handleChnage","input","props","property_name","num","replace","handleUpdate","handleBlur","required","validation_error","error","setState","active","handleFocus","state","componentWillReceiveProps","nextProps","validate","render","empty_text","validation_text","label","system_text","global","e","target","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport validator from \"validator\";\nimport { connect } from 'react-redux'\nimport * as actions from '../../actions/actions'\n\n\nconst validateInput = (type, value) => {\n  switch (type) {\n    case \"email\":\n      return !validator.isEmail(value);\n    case \"phone\":\n      return !validator.isMobilePhone(String(value));\n    default:\n      break;\n  }\n};\n\nclass TextInput extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  handleChnage = (value) => {\n    const { input } = this.props;\n    const { property_name, type } = input;\n    if (type === \"phone\") {\n      let num = value.replace(/[^0-9.]/g, \"\");\n      this.props.handleUpdate(property_name, num);\n    } else {\n      this.props.handleUpdate(property_name, value);\n    }\n  };\n  handleBlur = () => {\n    const { value, input } = this.props;\n    const { type, required } = input;\n\n    let validation_error, error;\n    this.setState({\n      active: value,\n    });\n    if (value) {\n      validation_error = validateInput(type, value);\n    } else {\n      if (required) error = true;\n    }\n    this.setState({\n      validation_error,\n      error,\n    });\n  };\n  handleFocus = () => {\n    this.setState({\n      active: true,\n      validation_error: false,\n      error: false,\n    });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const { validate, input, value } = this.props;\n    const { type, required } = input;\n    if (nextProps.validate !== validate && required) {\n      this.handleBlur(type, value);\n    }\n  }\n\n  render() {\n    const { input, value } = this.props;\n    const { empty_text, validation_text, label, type } = input;\n    const { active, error, validation_error } = this.state;\n    const {system_text} = this.props.global\n    return (\n      <div\n        className={\n          active || value ? \"text__input text__input--active\" : \"text__input\"\n        }\n      >\n        {/* <label>{label}</label> */}\n        <input\n          type={type === \"password\" ? \"password\" : \"text\"}\n          onChange={(e) => this.handleChnage(e.target.value)}\n          onBlur={(e) => this.handleBlur()}\n          onFocus={(e) => this.handleFocus()}\n          placeholder={system_text[label]}\n          value={value}\n        />\n        {error ? (\n          <p className=\"text__input__error\">{system_text[empty_text]}</p>\n        ) : validation_error ? (\n          <p className=\"text__input__error\">{system_text[validation_text]}</p>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ global }) {\n  return { global }\n}\n\nexport default (connect(mapStateToProps, actions)(TextInput))\n\n"]},"metadata":{},"sourceType":"module"}