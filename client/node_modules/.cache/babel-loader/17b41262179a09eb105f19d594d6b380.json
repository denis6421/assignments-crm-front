{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/client/src/components/settings/categories/system/SystemSettings.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../../actions/actions\";\nimport { apiPostRequest } from \"../../../../tools/api\";\nimport SelectBox from \"../../../../parts/SelectBox\";\nimport IsraelImg from \"../../../../images/flags/israel.svg\";\nimport UsaImg from \"../../../../images/flags/usa.svg\";\nimport SmallLoader from \"../../../../parts/SmallLoader\";\nimport SystemLoader from \"./SystemLoader\";\nconst languages = [{\n  name: \"English\",\n  value: \"english\",\n  img: UsaImg\n}, {\n  name: \"Hebrew\",\n  value: \"hebrew\",\n  img: IsraelImg\n}];\n\nclass SystemSettings extends Component {\n  constructor() {\n    super();\n\n    this.changeLanguage = async language => {\n      const user = this.props.user.user;\n      const api = \"account-settings/update\";\n      this.setState({\n        loading: true\n      });\n      setTimeout(async () => {\n        const body = {\n          user: user._id,\n          language: language.value\n        };\n\n        try {\n          await apiPostRequest(api, body).then(res => {\n            const body = document.querySelector('body');\n            body.style.opacity = 0;\n            this.props.setSystemLanguage(res.result.language);\n            let selected = languages.filter(m => m.value === res.result.language)[0];\n            this.setState({\n              selected\n            });\n            setTimeout(() => {\n              body.style.opacity = 1;\n            }, 1000);\n          });\n        } catch (error) {}\n      }, 500);\n    };\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const language = this.props.global.language;\n    let selected = languages.filter(m => m.value === language)[0];\n    console.log(selected, language);\n    this.setState({\n      selected\n    });\n  }\n\n  render() {\n    const system_text = this.props.global.system_text;\n    const _this$state = this.state,\n          selected = _this$state.selected,\n          loading = _this$state.loading;\n    return React.createElement(\"div\", {\n      className: \"settings__system\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, loading ? React.createElement(SystemLoader, {\n      close: () => this.setState({\n        loading: false\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }) : '', React.createElement(\"section\", {\n      className: \"settings__system__section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, system_text.LANGUAGE_SELECT), React.createElement(SelectBox, {\n      value: selected,\n      options: languages,\n      handleSelect: this.changeLanguage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction mapStateToProps({\n  user,\n  global\n}) {\n  return {\n    user,\n    global\n  };\n}\n\nexport default connect(mapStateToProps, actions)(SystemSettings);","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/client/src/components/settings/categories/system/SystemSettings.jsx"],"names":["React","Component","connect","actions","apiPostRequest","SelectBox","SmallLoader","SystemLoader","languages","name","value","img","UsaImg","IsraelImg","SystemSettings","constructor","changeLanguage","language","user","props","api","setState","loading","setTimeout","body","_id","then","res","document","querySelector","style","opacity","setSystemLanguage","result","selected","filter","m","error","state","componentDidMount","global","console","log","render","system_text","LANGUAGE_SELECT","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../../actions/actions\";\nimport { apiPostRequest } from \"../../../../tools/api\";\nimport SelectBox from \"../../../../parts/SelectBox\";\nimport IsraelImg from \"../../../../images/flags/israel.svg\";\nimport UsaImg from \"../../../../images/flags/usa.svg\";\nimport SmallLoader from \"../../../../parts/SmallLoader\";\nimport SystemLoader from \"./SystemLoader\";\n\nconst languages = [\n  { name: \"English\", value: \"english\", img: UsaImg },\n  { name: \"Hebrew\", value: \"hebrew\", img: IsraelImg },\n];\nclass SystemSettings extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const { language } = this.props.global;\n    let selected = languages.filter((m) => m.value === language)[0];\n    console.log(selected, language);\n    this.setState({\n      selected,\n    });\n  }\n  changeLanguage = async (language) => {\n    const { user } = this.props.user;\n    const api = \"account-settings/update\";\n    this.setState({\n        loading:true\n       })\n    setTimeout(async () => {\n        const body = {\n            user: user._id,\n            language: language.value,\n          };\n          try {\n            \n            await apiPostRequest(api, body).then((res) => {\n                const body = document.querySelector('body')\n                body.style.opacity = 0\n              this.props.setSystemLanguage(res.result.language);\n              let selected = languages.filter(\n                (m) => m.value === res.result.language\n              )[0];\n              this.setState({\n                selected,\n              });\n                setTimeout(() => {\n                    body.style.opacity = 1\n                }, 1000);\n            });\n          } catch (error) {\n            \n          }\n    }, 500);\n\n  };\n\n\n  render() {\n    const { system_text } = this.props.global;\n    const { selected, loading } = this.state;\n    return (\n      <div className=\"settings__system\">\n       {loading ? <SystemLoader\n       close = {() => this.setState({loading:false})}\n       /> : ''}\n        <section className=\"settings__system__section\">\n          <h3>{system_text.LANGUAGE_SELECT}</h3>\n          <SelectBox\n            value={selected}\n            options={languages}\n            handleSelect={this.changeLanguage}\n          />\n        </section>\n      </div>\n    );\n  }\n}\nfunction mapStateToProps({ user, global }) {\n  return { user, global };\n}\n\nexport default connect(mapStateToProps, actions)(SystemSettings);\n"]},"metadata":{},"sourceType":"module"}