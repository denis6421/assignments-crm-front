{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/front/client/src/components/assignments/parts/HandleAssignment.jsx\";\nimport React, { Component } from \"react\";\nimport assignments_inputs_data from \"./assignments_inputs_data\";\nimport TextInput from \"../../../parts/inputs/TextInput\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../actions/actions\";\nimport SingleDatepicker from \"../../../parts/SingleDatepicker\";\nimport SmallLoader from \"../../../parts/SmallLoader\";\nimport DraftInput from \"../../../parts/inputs/DraftInput\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FilesUpload from \"../../../parts/FilesUpload\";\nimport SubmitButtons from \"../../../parts/SubmitButtons\";\nimport EmployeeAssignmentsPopup from \"../../employee-page/employee-assignments/EmployeeAssignmentsPopup\";\nimport * as Scroll from 'react-scroll';\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\n\nclass HandleAssignment extends Component {\n  constructor() {\n    super();\n\n    this.updateStateAssignment = (name, value) => {\n      const assignment = this.state.assignment;\n      let new_assignment = JSON.parse(JSON.stringify(assignment));\n      new_assignment[name] = value;\n      this.setState({\n        assignment: new_assignment\n      });\n    };\n\n    this.submitForm = async e => {\n      const _this$state = this.state,\n            is_edit = _this$state.is_edit,\n            assignment = _this$state.assignment;\n      e.preventDefault();\n      this.setState({\n        validate: true\n      });\n      setTimeout(async () => {\n        this.setState({\n          validate: false\n        });\n        const errors = document.querySelectorAll(\".text__input__error\");\n\n        if (errors.length === 0) {\n          if (is_edit) {\n            await this.props.edit(assignment);\n            this.close();\n          } else {\n            await this.props.create(assignment);\n            this.close();\n          }\n        }\n      }, 50);\n    };\n\n    this.close = () => {\n      this.setState({\n        loaded: false\n      });\n      setTimeout(() => {\n        this.props.toggleHandleAssignment();\n      }, 400);\n    };\n\n    this.setAssignment = assignment => {\n      this.setState({\n        assignment_updated: true,\n        assignment\n      });\n      setTimeout(() => {\n        this.setState({\n          assignment_updated: false\n        });\n      }, 50);\n    };\n\n    this.scrolltop = () => {\n      console.log('laaaaaaaa');\n      this.componentRef.current.scrollTop = 0;\n    };\n\n    this.state = {\n      assignment: {}\n    };\n    this.componentRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          assignment_to_edit = _this$props.assignment_to_edit,\n          new_assignment = _this$props.new_assignment;\n    this.setState({\n      is_edit: assignment_to_edit,\n      assignment: assignment_to_edit ? assignment_to_edit : {}\n    });\n\n    if (new_assignment) {\n      this.setState({\n        assignment: new_assignment\n      });\n    }\n\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    }, 20);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          loaded = _this$state2.loaded,\n          is_edit = _this$state2.is_edit,\n          validate = _this$state2.validate,\n          assignment = _this$state2.assignment,\n          show_options = _this$state2.show_options,\n          assignment_updated = _this$state2.assignment_updated;\n    const _this$props2 = this.props,\n          from_employee_page = _this$props2.from_employee_page,\n          loading = _this$props2.loading,\n          assignments_list = _this$props2.assignments_list;\n    const system_text = this.props.global.system_text;\n    return React.createElement(\"div\", {\n      id: loaded ? \"assignments__handle--active\" : \"\",\n      className: \"assignments__handle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"overlay\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      ref: this.componentRef,\n      onSubmit: e => this.submitForm(e),\n      className: \"assignments__handle__form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, from_employee_page && show_options ? React.createElement(EmployeeAssignmentsPopup, {\n      closePopup: () => this.setState({\n        show_options: false\n      }),\n      assignments_list: assignments_list,\n      setAssignment: this.setAssignment,\n      system_text: system_text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }) : '', React.createElement(\"button\", {\n      style: {\n        opacity: loaded ? 1 : 0\n      },\n      type: \"button\",\n      onClick: () => this.close(),\n      className: \"assignments__handle__form__close flex__center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, is_edit ? system_text.EDIT : system_text.CREATE), from_employee_page && !is_edit ? React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => this.setState({\n        show_options: true\n      }),\n      className: \"save__btn suggestions__btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, system_text.TEMPLATES) : '', assignment && loaded && assignments_inputs_data.map(input => {\n      switch (input.type) {\n        case \"draft\":\n          return React.createElement(DraftInput, {\n            handleUpdate: this.updateStateAssignment,\n            input: input,\n            validate: validate,\n            property_name: input.property_name,\n            value: assignment ? assignment.text : '',\n            label: input.label,\n            system_text: system_text,\n            updated: assignment_updated,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          });\n\n        default:\n          return React.createElement(TextInput, {\n            handleUpdate: this.updateStateAssignment,\n            input: input,\n            validate: validate,\n            property_name: input.property_name,\n            value: assignment ? assignment[input.property_name] : \"\",\n            system_text: system_text,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          });\n      }\n    }), from_employee_page ? React.createElement(\"div\", {\n      className: \"assignments__handle__employee__page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, is_edit ? React.createElement(\"section\", {\n      id: \"assignments__handle__employee__status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, system_text.STATUS), React.createElement(\"aside\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, system_text.ASSIGNMENT_STATUS_ARR.map(m => {\n      return React.createElement(\"button\", {\n        type: \"button\",\n        className: assignment.status === m.value ? \"save__btn\" : \"cancel__btn\",\n        onClick: () => this.updateStateAssignment(\"status\", m.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, m.text);\n    }))) : \"\", React.createElement(SingleDatepicker, {\n      scrolltop: this.scrolltop,\n      sendDate: this.updateStateAssignment,\n      property_name: \"deadline\",\n      date: assignment ? assignment.deadline : \"\",\n      title: system_text.DEADLINE,\n      empty_error: \"Required field\",\n      validate: validate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    })) : \"\", React.createElement(FilesUpload, {\n      update: this.updateStateAssignment,\n      property_name: \"files\",\n      files: assignment ? assignment.files : [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(SubmitButtons, {\n      close: this.close,\n      submit_text: system_text.SAVE,\n      close_text: system_text.CANCEL,\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })));\n  }\n\n}\n\nfunction mapStateToProps({\n  assignments,\n  global\n}) {\n  return {\n    assignments,\n    global\n  };\n}\n\nexport default connect(mapStateToProps, actions)(HandleAssignment);","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/front/client/src/components/assignments/parts/HandleAssignment.jsx"],"names":["React","Component","assignments_inputs_data","TextInput","connect","actions","SingleDatepicker","SmallLoader","DraftInput","CloseIcon","FilesUpload","SubmitButtons","EmployeeAssignmentsPopup","Scroll","Link","Element","Events","animateScroll","scroll","scrollSpy","scroller","HandleAssignment","constructor","updateStateAssignment","name","value","assignment","state","new_assignment","JSON","parse","stringify","setState","submitForm","e","is_edit","preventDefault","validate","setTimeout","errors","document","querySelectorAll","length","props","edit","close","create","loaded","toggleHandleAssignment","setAssignment","assignment_updated","scrolltop","console","log","componentRef","current","scrollTop","createRef","componentDidMount","assignment_to_edit","render","show_options","from_employee_page","loading","assignments_list","system_text","global","opacity","EDIT","CREATE","TEMPLATES","map","input","type","property_name","text","label","STATUS","ASSIGNMENT_STATUS_ARR","m","status","deadline","DEADLINE","files","SAVE","CANCEL","mapStateToProps","assignments"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport assignments_inputs_data from \"./assignments_inputs_data\";\nimport TextInput from \"../../../parts/inputs/TextInput\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../../actions/actions\";\nimport SingleDatepicker from \"../../../parts/SingleDatepicker\";\nimport SmallLoader from \"../../../parts/SmallLoader\";\nimport DraftInput from \"../../../parts/inputs/DraftInput\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport FilesUpload from \"../../../parts/FilesUpload\";\nimport SubmitButtons from \"../../../parts/SubmitButtons\";\nimport EmployeeAssignmentsPopup from \"../../employee-page/employee-assignments/EmployeeAssignmentsPopup\";\nimport * as Scroll from 'react-scroll';\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll'\n \n \n\nclass HandleAssignment extends Component {\n  constructor() {\n    super();\n    this.state = {\n      assignment: {},\n    };\n    this.componentRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { assignment_to_edit, new_assignment } = this.props;\n    this.setState({\n      is_edit: assignment_to_edit,\n      assignment: assignment_to_edit ? assignment_to_edit : {},\n    });\n    if (new_assignment) {\n      this.setState({\n        assignment: new_assignment,\n      });\n    }\n    setTimeout(() => {\n      this.setState({\n        loaded: true,\n      });\n    }, 20);\n  }\n\n  updateStateAssignment = (name, value) => {\n    const { assignment } = this.state;\n    let new_assignment = JSON.parse(JSON.stringify(assignment));\n    new_assignment[name] = value;\n    this.setState({\n      assignment: new_assignment,\n    });\n  };\n\n  submitForm = async (e) => {\n    const { is_edit, assignment } = this.state;\n    e.preventDefault();\n    this.setState({\n      validate: true,\n    });\n    setTimeout(async () => {\n      this.setState({\n        validate: false,\n      });\n      const errors = document.querySelectorAll(\".text__input__error\");\n      if (errors.length === 0) {\n        if (is_edit) {\n          await this.props.edit(assignment);\n          this.close();\n        } else {\n          await this.props.create(assignment);\n          this.close();\n        }\n      }\n    }, 50);\n  };\n\n  close = () => {\n    this.setState({\n      loaded: false,\n    });\n    setTimeout(() => {\n      this.props.toggleHandleAssignment();\n    }, 400);\n  };\n  setAssignment = (assignment) => {\n    this.setState({\n      assignment_updated:true,\n      assignment\n    })\n    setTimeout(() => {\n      this.setState({\n        assignment_updated:false,\n      })\n    }, 50);\n  }\n  scrolltop = () => {\n    console.log('laaaaaaaa')\n    this.componentRef.current.scrollTop = 0;\n\n\n  }\n\n  render() {\n    const { loaded, is_edit, validate, assignment, show_options , assignment_updated} = this.state;\n    const { from_employee_page, loading, assignments_list } = this.props;\n    const {system_text} = this.props.global\n    return (\n      <div\n        id={loaded ? \"assignments__handle--active\" : \"\"}\n        className=\"assignments__handle\"\n      >\n        <section className=\"overlay\"></section>\n        <form\n              ref={ this.componentRef }\n\n          onSubmit={(e) => this.submitForm(e)}\n          className=\"assignments__handle__form\"\n        >\n          {\n            from_employee_page && show_options? \n            <EmployeeAssignmentsPopup \n            closePopup = {() => this.setState({show_options:false})}\n            assignments_list = {assignments_list}\n            setAssignment ={this.setAssignment}\n            system_text = {system_text}\n            />  :''\n          }\n          <button\n            style={{\n              opacity: loaded ? 1 : 0,\n            }}\n            type=\"button\"\n            onClick={() => this.close()}\n            className=\"assignments__handle__form__close flex__center\"\n          >\n            \n            <CloseIcon />\n          </button>\n          <h2>{is_edit ? system_text.EDIT :system_text.CREATE}</h2>\n          {from_employee_page && !is_edit? \n            <button \n            type='button'\n            onClick = {() => this.setState({show_options:true})}\n          className='save__btn suggestions__btn'>{system_text.TEMPLATES}</button>\n             \n        : ''}\n          {assignment && loaded &&\n            assignments_inputs_data.map((input) => {\n              switch (input.type) {\n                case \"draft\":\n                  return (\n                    <DraftInput\n                      handleUpdate={this.updateStateAssignment}\n                      input={input}\n                      validate={validate}\n                      property_name={input.property_name}\n                      value={assignment ? assignment.text : ''}\n                      label={input.label}\n                      system_text = {system_text}\n                      updated = {assignment_updated}\n                    />\n                  );\n                default:\n                  return (\n                    <TextInput\n                      handleUpdate={this.updateStateAssignment}\n                      input={input}\n                      validate={validate}\n                      property_name={input.property_name}\n                      value={assignment ? assignment[input.property_name] : \"\"}\n                      system_text = {system_text}\n                    />\n                  );\n              }\n            })}\n          {from_employee_page ? (\n            <div className=\"assignments__handle__employee__page\">\n              {is_edit ? (\n                <section id=\"assignments__handle__employee__status\">\n                  <h3>{system_text.STATUS}</h3>\n                  <aside>\n                    {system_text.ASSIGNMENT_STATUS_ARR.map((m) => {\n                      return (\n                        <button\n                          type=\"button\"\n                          className={\n                            assignment.status === m.value\n                              ? \"save__btn\"\n                              : \"cancel__btn\"\n                          }\n                          onClick={() =>\n                            this.updateStateAssignment(\"status\", m.value)\n                          }\n                        >\n                          {m.text}\n                        </button>\n                      );\n                    })}\n                  </aside>\n                </section>\n              ) : (\n                \"\"\n              )}\n\n              <SingleDatepicker\n              scrolltop = {this.scrolltop}\n                sendDate={this.updateStateAssignment}\n                property_name=\"deadline\"\n                date={assignment ? assignment.deadline : \"\"}\n                title={system_text.DEADLINE}\n                empty_error=\"Required field\"\n                validate={validate}\n                \n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n          <FilesUpload\n            update={this.updateStateAssignment}\n            property_name=\"files\"\n            files={assignment ? assignment.files : []}\n          />\n          <SubmitButtons\n            close={this.close}\n            submit_text={system_text.SAVE}\n            close_text={system_text.CANCEL}\n            loading={loading}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ assignments, global }) {\n  return { assignments, global };\n}\n\nexport default connect(mapStateToProps, actions)(HandleAssignment);\n"]},"metadata":{},"sourceType":"module"}