{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/client/src/parts/FilesUpload.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/actions\";\nimport Backendless from \"backendless\";\nimport Dropzone from \"react-dropzone\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SmallLoader from \"./SmallLoader\";\nimport AttachmentOutlinedIcon from '@material-ui/icons/AttachmentOutlined';\nBackendless.initApp(\"0C7F99A6-3715-126A-FF3C-3387261D5C00\", \"957C469D-E5DE-4C1D-8A8B-A3BE62BF1CD2\");\n\nconst checkIfExist = (arr, file) => {\n  return arr.filter(m => m.name === file.name)[0];\n};\n\nclass FilesUpload extends Component {\n  constructor() {\n    super();\n\n    this.handleFileSelect = async files => {\n      const property_name = this.props.property_name;\n      this.setState({\n        loading: true\n      });\n\n      for (let file of files) {\n        try {\n          await Backendless.Files.upload(file, '/myFiles', true).then(result => {\n            let url = result.fileURL;\n            let new_file = {\n              name: file.name,\n              url\n            };\n            let new_files = this.props.files ? this.props.files : [];\n\n            if (!checkIfExist(new_files, new_file)) {\n              new_files = [...new_files, new_file];\n              this.props.update(property_name, new_files);\n            }\n          });\n          this.setState({\n            loading: false\n          });\n        } catch (error) {}\n      }\n    };\n\n    this.removeFile = file => {\n      const _this$props = this.props,\n            files = _this$props.files,\n            property_name = _this$props.property_name;\n      let new_files = files.filter(m => m.name !== file.name);\n      this.props.update(property_name, new_files);\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    const files = this.props.files;\n    const loading = this.state.loading;\n    const system_text = this.props.global.system_text;\n    return React.createElement(\"div\", {\n      className: \"files__upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, loading ? React.createElement(\"div\", {\n      className: \"dropzone dropzone__loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(SmallLoader, {\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })) : React.createElement(Dropzone, {\n      className: \"dropzone flex__start\",\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      onDrop: acceptedFiles => this.handleFileSelect(acceptedFiles),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(AttachmentOutlinedIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, system_text.ADD_FILE)), React.createElement(\"ul\", {\n      className: \"files__upload__list flex__start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, files && files.length > 0 ? files.map(m => {\n      return React.createElement(\"li\", {\n        className: \"flex__start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: m.url,\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, m.name)), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => this.removeFile(m),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"X\"));\n    }) : ''));\n  }\n\n}\n\nfunction mapStateToProps({\n  global\n}) {\n  return {\n    global\n  };\n}\n\nexport default connect(mapStateToProps, actions)(FilesUpload);","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/client/src/parts/FilesUpload.jsx"],"names":["React","Component","connect","actions","Backendless","Dropzone","AddIcon","SmallLoader","AttachmentOutlinedIcon","initApp","checkIfExist","arr","file","filter","m","name","FilesUpload","constructor","handleFileSelect","files","property_name","props","setState","loading","Files","upload","then","result","url","fileURL","new_file","new_files","update","error","removeFile","state","render","system_text","global","width","height","acceptedFiles","ADD_FILE","length","map","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions/actions\";\nimport Backendless from \"backendless\";\nimport Dropzone from \"react-dropzone\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SmallLoader from \"./SmallLoader\";\nimport AttachmentOutlinedIcon from '@material-ui/icons/AttachmentOutlined';\n\nBackendless.initApp(\n  \"0C7F99A6-3715-126A-FF3C-3387261D5C00\",\n  \"957C469D-E5DE-4C1D-8A8B-A3BE62BF1CD2\"\n);\n\n\n\nconst checkIfExist = (arr, file) => {\n    return arr.filter(m => m.name === file.name)[0]\n}\nclass FilesUpload extends Component {\n  constructor() {\n    super();\n    this.state = {\n       \n    };\n  }\n  handleFileSelect = async (files) => {\n      const {property_name} = this.props\n      this.setState({\n          loading:true\n      })\n   for(let file of files){\n    try {\n      await   Backendless.Files.upload(file, '/myFiles', true).then(result => {\n          let url = result.fileURL\n          let new_file = {\n              name:file.name,\n              url\n          }\n          let new_files = this.props.files ? this.props.files : []\n          if(!checkIfExist(new_files, new_file)){\n            new_files = [...new_files, new_file]\n            this.props.update(property_name, new_files)\n          }\n        })\n        this.setState({\n            loading:false\n        })\n       } catch (error) {\n         \n       }\n       \n   }\n \n      \n   }\n\n   removeFile = (file) => {\n    const {files, property_name} = this.props\n   \n    let new_files = files.filter(m => m.name !== file.name)\n    this.props.update(property_name, new_files)\n   }\n  render() {\n      const {files} = this.props\n     const {loading} = this.state\n     const {system_text} = this.props.global\n    return (\n      <div className=\"files__upload\">\n        {loading  ?\n        <div className='dropzone dropzone__loader'><SmallLoader active ={true}/></div>\n        : <Dropzone\n        className='dropzone flex__start'\n          style={{ width: \"100%\", height: \"100%\" }}\n          onDrop={(acceptedFiles) => this.handleFileSelect(acceptedFiles)}\n        ><AttachmentOutlinedIcon /><h5>{system_text.ADD_FILE}</h5></Dropzone>}\n\n        <ul className='files__upload__list flex__start'>\n        {\n            files && files.length > 0 ? \n                files.map(m => {\n                return <li className='flex__start'>\n                    <a href={m.url} target='_blank'>\n                    <h4>{m.name}</h4>\n                    </a>\n                    <button \n                    type ='button'\n                    onClick = {() => this.removeFile(m)}>X</button>\n                    </li>\n                })\n            :''\n        }\n        </ul>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({  global }) {\n  return {  global };\n}\n\nexport default connect(mapStateToProps, actions)(FilesUpload);\n"]},"metadata":{},"sourceType":"module"}