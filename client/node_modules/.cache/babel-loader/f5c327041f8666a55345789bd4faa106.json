{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/front/client/src/parts/inputs/PasswordInput.jsx\";\nimport React, { Component } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport generator from \"generate-password\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions/actions';\n\nclass PasswordInput extends Component {\n  constructor() {\n    super();\n\n    this.generatePassword = () => {\n      var password = generator.generate({\n        length: 10,\n        uppercase: false\n      });\n      this.setState({\n        generated: true,\n        error: false\n      });\n      this.handleChange(password);\n    };\n\n    this.handleChange = value => {\n      const input = this.props.input;\n      const property_name = input.property_name;\n      this.props.updateParentState('pw_changed', true);\n      this.props.handleUpdate(property_name, value);\n    };\n\n    this.handleBlur = () => {\n      const value = this.props.value;\n      this.setState({\n        active: value\n      });\n      this.setState({\n        error: !value\n      });\n    };\n\n    this.handleFocus = () => {\n      this.setState({\n        active: true,\n        validation_error: false,\n        error: false\n      });\n    };\n\n    this.handleCopy = () => {\n      this.setState({\n        copied: true\n      });\n      setTimeout(() => {\n        this.setState({\n          copied: false\n        });\n      }, 2000);\n    };\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const is_edit = this.props.is_edit;\n\n    if (is_edit) {\n      this.setState({\n        active: true\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const _this$props = this.props,\n          validate = _this$props.validate,\n          input = _this$props.input,\n          value = _this$props.value,\n          is_edit = _this$props.is_edit;\n    const type = input.type;\n\n    if (nextProps.validate !== validate && !is_edit) {\n      this.handleBlur(type, value);\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          input = _this$props2.input,\n          value = _this$props2.value,\n          is_edit = _this$props2.is_edit;\n    const empty_text = input.empty_text,\n          label = input.label;\n    const _this$state = this.state,\n          active = _this$state.active,\n          error = _this$state.error,\n          generated = _this$state.generated,\n          copied = _this$state.copied;\n    const system_text = this.props.global.system_text;\n    return React.createElement(\"div\", {\n      id: \"password__input\",\n      className: active || value ? \"text__input text__input--active flex__start\" : \"text__input flex__start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: system_text[label],\n      onChange: e => this.handleChange(e.target.value),\n      type: \"password\",\n      value: value ? value : !value && is_edit ? '********' : '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(CopyToClipboard, {\n      text: value,\n      onCopy: () => this.handleCopy(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      style: {\n        opacity: value ? 1 : 0.6,\n        pointerEvents: value ? \"all\" : \"none\",\n        width: '80px'\n      },\n      className: \"cancel__btn password__button flex__center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, copied ? React.createElement(CheckCircleIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }) : \"\", copied ? system_text.COPIED : system_text.COPY)), is_edit ? React.createElement(\"button\", {\n      style: {\n        width: '110px',\n        pointerEvents: generated ? 'none' : 'all'\n      },\n      type: \"button\",\n      onClick: () => this.generatePassword(),\n      className: \"cancel__btn password__button flex__center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, generated ? React.createElement(CheckCircleIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }) : \"\", generated ? system_text.done : system_text.RESET) : React.createElement(\"button\", {\n      style: {\n        pointerEvents: generated ? 'none' : 'all',\n        width: '110px'\n      },\n      type: \"button\",\n      onClick: () => this.generatePassword(),\n      className: \"cancel__btn password__button flex__center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, generated ? React.createElement(CheckCircleIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }) : \"\", generated ? system_text.GENERATED : system_text.GENERATE), error ? React.createElement(\"p\", {\n      className: \"text__input__error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, system_text[empty_text]) : \"\");\n  }\n\n}\n\nfunction mapStateToProps({\n  global\n}) {\n  return {\n    global\n  };\n}\n\nexport default connect(mapStateToProps, actions)(PasswordInput);","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/front/client/src/parts/inputs/PasswordInput.jsx"],"names":["React","Component","CopyToClipboard","generator","CheckCircleIcon","connect","actions","PasswordInput","constructor","generatePassword","password","generate","length","uppercase","setState","generated","error","handleChange","value","input","props","property_name","updateParentState","handleUpdate","handleBlur","active","handleFocus","validation_error","handleCopy","copied","setTimeout","state","componentDidMount","is_edit","componentWillReceiveProps","nextProps","validate","type","render","empty_text","label","system_text","global","e","target","opacity","pointerEvents","width","COPIED","COPY","done","RESET","GENERATED","GENERATE","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport generator from \"generate-password\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport { connect } from 'react-redux'\nimport * as actions from '../../actions/actions'\n\n\nclass PasswordInput extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\ncomponentDidMount(){\n        const {is_edit} = this.props\n        if(is_edit){\n            this.setState({\n                active:true\n            })\n        }\n}\n  generatePassword = () => {\n    var password = generator.generate({\n      length: 10,\n      uppercase: false,\n    });\n    this.setState({\n      generated: true,\n      error:false\n    });\n    this.handleChange(password);\n  };\n\n  handleChange = (value) => {\n    const { input } = this.props;\n    const { property_name } = input;\n    this.props.updateParentState('pw_changed', true)\n    this.props.handleUpdate(property_name, value);\n  };\n  handleBlur = () => {\n    const { value } = this.props;\n    this.setState({\n      active: value,\n    });\n\n    this.setState({\n      error: !value,\n    });\n  };\n  handleFocus = () => {\n    this.setState({\n      active: true,\n      validation_error: false,\n      error: false,\n    });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const { validate, input, value, is_edit } = this.props;\n    const { type } = input;\n    if (nextProps.validate !== validate && !is_edit) {\n      this.handleBlur(type, value);\n    }\n  }\n  handleCopy = () => {\n    this.setState({\n      copied: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        copied: false,\n      });\n    }, 2000);\n  };\n  render() {\n    const { input, value, is_edit } = this.props;\n    const { empty_text, label } = input;\n    const { active, error, generated , copied} = this.state;\n    const {system_text} = this.props.global\n    return (\n      <div\n        id=\"password__input\"\n        className={\n          active || value\n            ? \"text__input text__input--active flex__start\"\n            : \"text__input flex__start\"\n        }\n      >\n        \n        <input\n        placeholder = {system_text[label]}\n          onChange = {(e) => this.handleChange(e.target.value)}\n          type=\"password\"\n          value={value  ? value : !value && is_edit ? '********' : ''}\n        />\n\n        <CopyToClipboard \n        text={value}\n         onCopy={() => this.handleCopy()}>\n          <button\n            type=\"button\"\n            style={{\n              opacity: value ? 1 : 0.6,\n              pointerEvents: value ? \"all\" : \"none\",\n              width:'80px'\n            }}\n            className=\"cancel__btn password__button flex__center\"\n          >\n            {copied ? <CheckCircleIcon /> : \"\"}\n            {copied ? system_text.COPIED : system_text.COPY}\n          </button>\n        </CopyToClipboard>\n        {is_edit ? (\n          <button \n          style ={{\n          width:'110px',\n          pointerEvents:generated  ? 'none'  :'all'\n        }}\n          type=\"button\"\n          onClick = {() => this.generatePassword()}\n          className=\"cancel__btn password__button flex__center\">\n          {generated ? <CheckCircleIcon /> : \"\"}\n            {generated ? system_text.done :system_text.RESET}\n          </button>\n        ) : (\n          <button\n          style ={{\n              pointerEvents:generated  ? 'none'  :'all',\n            width:'110px'\n          }}\n            type=\"button\"\n            onClick={() => this.generatePassword()}\n            className=\"cancel__btn password__button flex__center\"\n          >\n            {generated ? <CheckCircleIcon /> : \"\"}\n            {generated ? system_text.GENERATED : system_text.GENERATE}\n          </button>\n        )}\n        {error ? <p className=\"text__input__error\">{system_text[empty_text]}</p> : \"\"}\n      </div>\n    );\n  }\n}\n\n\nfunction mapStateToProps({ global }) {\n  return { global }\n}\n\nexport default (connect(mapStateToProps, actions)(PasswordInput))\n\n"]},"metadata":{},"sourceType":"module"}