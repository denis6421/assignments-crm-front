{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/front/client/src/parts/inputs/PasswordInput.jsx\";\nimport React, { Component } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport generator from \"generate-password\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport RotateLeftOutlinedIcon from \"@material-ui/icons/RotateLeftOutlined\";\nimport BtnWithTooltip from \"../../parts/BtnWithTooltip\";\nimport CheckCircleOutlineOutlinedIcon from '@material-ui/icons/CheckCircleOutlineOutlined';\n\nclass PasswordInput extends Component {\n  constructor() {\n    super();\n\n    this.generatePassword = () => {\n      var password = generator.generate({\n        length: 10,\n        uppercase: false\n      });\n      this.setState({\n        generated: true,\n        error: false\n      });\n      this.handleChange(password);\n    };\n\n    this.handleChange = value => {\n      const input = this.props.input;\n      const property_name = input.property_name;\n      this.props.updateParentState(\"pw_changed\", true);\n      this.props.handleUpdate(property_name, value);\n    };\n\n    this.handleBlur = () => {\n      const value = this.props.value;\n      this.setState({\n        active: value\n      });\n      this.setState({\n        error: !value\n      });\n    };\n\n    this.handleFocus = () => {\n      this.setState({\n        active: true,\n        validation_error: false,\n        error: false\n      });\n    };\n\n    this.handleCopy = () => {\n      this.setState({\n        copied: true\n      });\n      setTimeout(() => {\n        this.setState({\n          copied: false\n        });\n      }, 2000);\n    };\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const is_edit = this.props.is_edit;\n\n    if (is_edit) {\n      this.setState({\n        active: true\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const _this$props = this.props,\n          validate = _this$props.validate,\n          input = _this$props.input,\n          value = _this$props.value,\n          is_edit = _this$props.is_edit;\n    const type = input.type;\n\n    if (nextProps.validate !== validate && !is_edit) {\n      this.handleBlur(type, value);\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          input = _this$props2.input,\n          value = _this$props2.value,\n          is_edit = _this$props2.is_edit;\n    console.log(value);\n    const empty_text = input.empty_text,\n          label = input.label;\n    const _this$state = this.state,\n          active = _this$state.active,\n          error = _this$state.error,\n          generated = _this$state.generated,\n          copied = _this$state.copied;\n    const system_text = this.props.global.system_text;\n    return React.createElement(\"div\", {\n      id: \"password__input\",\n      className: active || value ? \"text__input text__input--active flex__start\" : \"text__input flex__start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: system_text[label],\n      onChange: e => this.handleChange(e.target.value),\n      type: \"password\",\n      value: value ? value : !value && is_edit ? \"********\" : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(CopyToClipboard, {\n      text: value,\n      onCopy: () => this.handleCopy(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(BtnWithTooltip, {\n      svg: copied ? React.createElement(CheckCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }) : React.createElement(FileCopyOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }),\n      tooltip: system_text.COPY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })), React.createElement(BtnWithTooltip, {\n      svg: generated ? React.createElement(CheckCircleOutlineOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }) : React.createElement(RotateLeftOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }),\n      handleClick: this.generatePassword,\n      value: true,\n      tooltip: system_text.GENERATE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), error ? React.createElement(\"p\", {\n      className: \"text__input__error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, system_text[empty_text]) : \"\");\n  }\n\n}\n\nfunction mapStateToProps({\n  global\n}) {\n  return {\n    global\n  };\n}\n\nexport default connect(mapStateToProps, actions)(PasswordInput);","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/front/client/src/parts/inputs/PasswordInput.jsx"],"names":["React","Component","CopyToClipboard","generator","CheckCircleIcon","connect","actions","FileCopyOutlinedIcon","RotateLeftOutlinedIcon","BtnWithTooltip","CheckCircleOutlineOutlinedIcon","PasswordInput","constructor","generatePassword","password","generate","length","uppercase","setState","generated","error","handleChange","value","input","props","property_name","updateParentState","handleUpdate","handleBlur","active","handleFocus","validation_error","handleCopy","copied","setTimeout","state","componentDidMount","is_edit","componentWillReceiveProps","nextProps","validate","type","render","console","log","empty_text","label","system_text","global","e","target","COPY","GENERATE","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport generator from \"generate-password\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\nimport RotateLeftOutlinedIcon from \"@material-ui/icons/RotateLeftOutlined\";\nimport BtnWithTooltip from \"../../parts/BtnWithTooltip\";\nimport CheckCircleOutlineOutlinedIcon from '@material-ui/icons/CheckCircleOutlineOutlined';\n\n\nclass PasswordInput extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n  componentDidMount() {\n    const { is_edit } = this.props;\n    if (is_edit) {\n      this.setState({\n        active: true,\n      });\n    }\n  }\n  generatePassword = () => {\n    var password = generator.generate({\n      length: 10,\n      uppercase: false,\n    });\n    this.setState({\n      generated: true,\n      error: false,\n    });\n    this.handleChange(password);\n  };\n\n  handleChange = (value) => {\n    const { input } = this.props;\n    const { property_name } = input;\n    this.props.updateParentState(\"pw_changed\", true);\n    this.props.handleUpdate(property_name, value);\n  };\n  handleBlur = () => {\n    const { value } = this.props;\n    this.setState({\n      active: value,\n    });\n\n    this.setState({\n      error: !value,\n    });\n  };\n  handleFocus = () => {\n    this.setState({\n      active: true,\n      validation_error: false,\n      error: false,\n    });\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const { validate, input, value, is_edit } = this.props;\n    const { type } = input;\n    if (nextProps.validate !== validate && !is_edit) {\n      this.handleBlur(type, value);\n    }\n  }\n  handleCopy = () => {\n    this.setState({\n      copied: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        copied: false,\n      });\n    }, 2000);\n  };\n  render() {\n    const { input, value, is_edit } = this.props;\n    console.log(value)\n    const { empty_text, label } = input;\n    const { active, error, generated, copied } = this.state;\n    const { system_text } = this.props.global;\n    return (\n      <div\n        id=\"password__input\"\n        className={\n          active || value\n            ? \"text__input text__input--active flex__start\"\n            : \"text__input flex__start\"\n        }\n      >\n        <input\n          placeholder={system_text[label]}\n          onChange={(e) => this.handleChange(e.target.value)}\n          type=\"password\"\n          value={value ? value : !value && is_edit ? \"********\" : \"\"}\n        />\n\n        <CopyToClipboard text={value} onCopy={() => this.handleCopy()}>\n          <BtnWithTooltip\n            svg={copied  ? <CheckCircleOutlineOutlinedIcon /> : <FileCopyOutlinedIcon />}\n            tooltip={system_text.COPY}\n          />\n        </CopyToClipboard>\n        <BtnWithTooltip\n          svg={generated  ?<CheckCircleOutlineOutlinedIcon /> : <RotateLeftOutlinedIcon />}\n          handleClick={this.generatePassword}\n          value={true}\n          tooltip={system_text.GENERATE}\n        />\n        {error ? (\n          <p className=\"text__input__error\">{system_text[empty_text]}</p>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ global }) {\n  return { global };\n}\n\nexport default connect(mapStateToProps, actions)(PasswordInput);\n"]},"metadata":{},"sourceType":"module"}