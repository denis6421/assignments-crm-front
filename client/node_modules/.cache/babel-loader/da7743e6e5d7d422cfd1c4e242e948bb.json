{"ast":null,"code":"var _jsxFileName = \"/Users/denis/Desktop/projects/todo/front/client/src/components/employees/Employees.jsx\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\nimport Employee from \"./parts/Employee\";\nimport HandleProfile from \"./parts/HandleProfile\";\nimport PopupWithFunction from \"../../parts/PopupWithFunction\";\nimport { apiGetRequest, apiPostRequest } from \"../../tools/api\";\nimport EmployeeLoader from \"./parts/EmployeeLoader\";\nimport NoData from \"../../parts/NoData\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport BtnWithTooltip from \"../../parts/BtnWithTooltip\";\n\nclass Employees extends Component {\n  constructor() {\n    super();\n\n    this.updateState = (name, value) => {\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.toggleHandleEmployee = (status, employee) => {\n      this.setState({\n        handle_employee: status,\n        employee\n      });\n    };\n\n    this.handleRemove = employee => {\n      this.setState({\n        employee_to_remove: employee\n      });\n    };\n\n    this.remove = async () => {\n      const _this$state = this.state,\n            employee_to_remove = _this$state.employee_to_remove,\n            employees_list = _this$state.employees_list;\n      this.setState({\n        remove_loading: true\n      });\n      const api = \"employee/delete\";\n      const res = await apiPostRequest(api, {\n        id: employee_to_remove._id\n      });\n\n      if (res.ok) {\n        this.props.removeEmployee(employee_to_remove, employees_list);\n        this.setState({\n          employees_list: employees_list.filter(m => m._id !== employee_to_remove._id)\n        });\n        this.close();\n      }\n\n      setTimeout(() => {\n        this.setState({\n          remove_loading: false\n        });\n      }, 400);\n    };\n\n    this.close = () => {\n      this.setState({\n        employee_to_remove: \"\"\n      });\n    };\n\n    this.handleView = view => {\n      this.setState({\n        list_view: view\n      });\n    };\n\n    this.saveEmployee = async (profile, pw_changed) => {\n      if (pw_changed) await this.resetEmployeePassword(profile);\n      if (profile._id) this.updateEmployee(profile);else this.createEmployee(profile);\n    };\n\n    this.createEmployee = async profile => {\n      const api = \"employee/create\";\n      const res = await apiPostRequest(api, profile);\n\n      if (res.ok) {\n        this.props.updateGlobalReducer(\"success\", \"Employee created successfully\");\n        let employees_list = JSON.parse(JSON.stringify(this.state.employees_list));\n        this.setState({\n          employees_list: [res.result, ...employees_list]\n        });\n      } else {\n        this.props.updateGlobalReducer(\"error\", res.result ? res.result : \"Failed to create employee\");\n      }\n    };\n\n    this.updateEmployee = async profile => {\n      const api = \"employee/update\";\n      const res = await apiPostRequest(api, profile);\n\n      if (res.ok) {\n        this.props.updateGlobalReducer(\"success\", \"Employee updated successfully\");\n        let employees_list = JSON.parse(JSON.stringify(this.state.employees_list));\n        let index = employees_list.findIndex(m => m._id == profile._id);\n\n        if (index >= 0) {\n          employees_list.splice(index, 1, res.result);\n          this.setState({\n            employees_list\n          });\n        }\n      } else {\n        this.props.updateGlobalReducer(\"error\", \"Failed to update employee\");\n      }\n    };\n\n    this.resetEmployeePassword = async profile => {\n      const api = \"employee/password-reset\";\n      const body = {\n        _id: profile._id,\n        password: profile.password\n      };\n      await apiPostRequest(api, body);\n    };\n\n    this.state = {\n      list_view: \"row\"\n    };\n  }\n\n  async componentDidMount() {\n    const api = \"employee/all\";\n    setTimeout(() => {\n      this.setState({\n        page_loaded: true\n      });\n    }, 20);\n    const res = await apiGetRequest(api);\n\n    if (res.ok) {\n      this.setState({\n        loaded: true,\n        employees_list: res.result\n      });\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          employees_list = _this$state2.employees_list,\n          employee = _this$state2.employee,\n          handle_employee = _this$state2.handle_employee,\n          employee_to_remove = _this$state2.employee_to_remove,\n          list_view = _this$state2.list_view,\n          loaded = _this$state2.loaded,\n          page_loaded = _this$state2.page_loaded,\n          remove_loading = _this$state2.remove_loading;\n    const system_text = this.props.global.system_text;\n    return React.createElement(\"div\", {\n      style: {\n        opacity: page_loaded ? 1 : 0\n      },\n      className: \"employees page__flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(PopupWithFunction, {\n      text: system_text.REMOVE_TEXT,\n      name: \"\".concat(employee_to_remove ? employee_to_remove.name : \"\", \"?\"),\n      active: employee_to_remove,\n      submit: this.remove,\n      close: this.close,\n      submit_text: system_text.YES,\n      close_text: system_text.NO,\n      loading: remove_loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), handle_employee ? React.createElement(HandleProfile, {\n      toggleHandleProfile: this.toggleHandleEmployee,\n      profile_to_edit: employee,\n      save: this.saveEmployee,\n      resetPassword: this.resetEmployeePassword,\n      edit_text: system_text.EDIT_EMPLOYEE,\n      create_text: system_text.CREATE_EMPLOYEE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }) : \"\", React.createElement(\"div\", {\n      className: \"employees__list__top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"flex__start page__header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(BtnWithTooltip, {\n      svg: React.createElement(PersonAddIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }),\n      handleClick: this.toggleHandleEmployee,\n      value: true,\n      tooltip: system_text.CREATE,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), React.createElement(\"section\", {\n      className: \"titles__section flex__start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, system_text.EMPLOYEES_TITLES.map((m, i) => {\n      return React.createElement(\"h3\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, m);\n    }))), loaded && employees_list && employees_list.length > 0 ? React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n      className: \"employees__list flex__start\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, employees_list.map(m => {\n      return React.createElement(Employee, {\n        list_view: list_view,\n        toggleHandleEmployee: this.toggleHandleEmployee,\n        employee: m,\n        key: m._id,\n        system_text: system_text,\n        handleRemove: this.handleRemove,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      });\n    }))) : !loaded ? React.createElement(EmployeeLoader, {\n      arr: [...Array(5).keys()],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }) : React.createElement(NoData, {\n      text: system_text.NO_EMPLOYEES,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps({\n  employees,\n  user,\n  global\n}) {\n  return {\n    employees,\n    user,\n    global\n  };\n}\n\nexport default withRouter(connect(mapStateToProps, actions)(Employees));","map":{"version":3,"sources":["/Users/denis/Desktop/projects/todo/front/client/src/components/employees/Employees.jsx"],"names":["React","Component","withRouter","connect","actions","Employee","HandleProfile","PopupWithFunction","apiGetRequest","apiPostRequest","EmployeeLoader","NoData","PersonAddIcon","BtnWithTooltip","Employees","constructor","updateState","name","value","setState","toggleHandleEmployee","status","employee","handle_employee","handleRemove","employee_to_remove","remove","state","employees_list","remove_loading","api","res","id","_id","ok","props","removeEmployee","filter","m","close","setTimeout","handleView","view","list_view","saveEmployee","profile","pw_changed","resetEmployeePassword","updateEmployee","createEmployee","updateGlobalReducer","JSON","parse","stringify","result","index","findIndex","splice","body","password","componentDidMount","page_loaded","loaded","render","system_text","global","opacity","REMOVE_TEXT","YES","NO","EDIT_EMPLOYEE","CREATE_EMPLOYEE","CREATE","EMPLOYEES_TITLES","map","i","length","Array","keys","NO_EMPLOYEES","mapStateToProps","employees","user"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\nimport Employee from \"./parts/Employee\";\nimport HandleProfile from \"./parts/HandleProfile\";\nimport PopupWithFunction from \"../../parts/PopupWithFunction\";\nimport { apiGetRequest, apiPostRequest } from \"../../tools/api\";\nimport EmployeeLoader from \"./parts/EmployeeLoader\";\nimport NoData from \"../../parts/NoData\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport BtnWithTooltip from \"../../parts/BtnWithTooltip\";\n\nclass Employees extends Component {\n  constructor() {\n    super();\n    this.state = {\n      list_view: \"row\",\n    };\n  }\n\n  async componentDidMount() {\n    const api = \"employee/all\";\n    setTimeout(() => {\n      this.setState({\n        page_loaded: true,\n      });\n    }, 20);\n    const res = await apiGetRequest(api);\n    if (res.ok) {\n      this.setState({\n        loaded: true,\n        employees_list: res.result,\n      });\n    }\n  }\n  updateState = (name, value) => {\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  toggleHandleEmployee = (status, employee) => {\n    this.setState({\n      handle_employee: status,\n      employee,\n    });\n  };\n\n  handleRemove = (employee) => {\n    this.setState({\n      employee_to_remove: employee,\n    });\n  };\n  remove = async () => {\n    const { employee_to_remove, employees_list } = this.state;\n    this.setState({\n      remove_loading: true,\n    });\n    const api = \"employee/delete\";\n    const res = await apiPostRequest(api, { id: employee_to_remove._id });\n    if (res.ok) {\n      this.props.removeEmployee(employee_to_remove, employees_list);\n      this.setState({\n        employees_list: employees_list.filter(\n          (m) => m._id !== employee_to_remove._id\n        ),\n      });\n      this.close();\n    }\n    setTimeout(() => {\n      this.setState({\n        remove_loading: false,\n      });\n    }, 400);\n  };\n  close = () => {\n    this.setState({\n      employee_to_remove: \"\",\n    });\n  };\n\n  handleView = (view) => {\n    this.setState({\n      list_view: view,\n    });\n  };\n\n  saveEmployee = async (profile, pw_changed) => {\n    if (pw_changed) await this.resetEmployeePassword(profile);\n    if (profile._id) this.updateEmployee(profile);\n    else this.createEmployee(profile);\n  };\n\n  createEmployee = async (profile) => {\n    const api = \"employee/create\";\n    const res = await apiPostRequest(api, profile);\n    if (res.ok) {\n      this.props.updateGlobalReducer(\n        \"success\",\n        \"Employee created successfully\"\n      );\n      let employees_list = JSON.parse(\n        JSON.stringify(this.state.employees_list)\n      );\n      this.setState({\n        employees_list: [res.result, ...employees_list],\n      });\n    } else {\n      this.props.updateGlobalReducer(\n        \"error\",\n        res.result ? res.result : \"Failed to create employee\"\n      );\n    }\n  };\n\n  updateEmployee = async (profile) => {\n    const api = \"employee/update\";\n    const res = await apiPostRequest(api, profile);\n    if (res.ok) {\n      this.props.updateGlobalReducer(\n        \"success\",\n        \"Employee updated successfully\"\n      );\n      let employees_list = JSON.parse(\n        JSON.stringify(this.state.employees_list)\n      );\n      let index = employees_list.findIndex((m) => m._id == profile._id);\n      if (index >= 0) {\n        employees_list.splice(index, 1, res.result);\n        this.setState({\n          employees_list,\n        });\n      }\n    } else {\n      this.props.updateGlobalReducer(\"error\", \"Failed to update employee\");\n    }\n  };\n  resetEmployeePassword = async (profile) => {\n    const api = \"employee/password-reset\";\n    const body = {\n      _id: profile._id,\n      password: profile.password,\n    };\n    await apiPostRequest(api, body);\n  };\n\n  render() {\n    const {\n      employees_list,\n      employee,\n      handle_employee,\n      employee_to_remove,\n      list_view,\n      loaded,\n      page_loaded,\n      remove_loading,\n    } = this.state;\n    const { system_text } = this.props.global;\n\n    return (\n      <div\n        style={{\n          opacity: page_loaded ? 1 : 0,\n        }}\n        className=\"employees page__flex\"\n      >\n        <PopupWithFunction\n          text={system_text.REMOVE_TEXT}\n          name={`${employee_to_remove ? employee_to_remove.name : \"\"}?`}\n          active={employee_to_remove}\n          submit={this.remove}\n          close={this.close}\n          submit_text={system_text.YES}\n          close_text={system_text.NO}\n          loading={remove_loading}\n        />\n        {handle_employee ? (\n          <HandleProfile\n            toggleHandleProfile={this.toggleHandleEmployee}\n            profile_to_edit={employee}\n            save={this.saveEmployee}\n            resetPassword={this.resetEmployeePassword}\n            edit_text={system_text.EDIT_EMPLOYEE}\n            create_text={system_text.CREATE_EMPLOYEE}\n          />\n        ) : (\n          \"\"\n        )}\n\n        <div className=\"employees__list__top\">\n          <header className=\"flex__start page__header\">\n            <BtnWithTooltip\n              svg={<PersonAddIcon />}\n              handleClick={this.toggleHandleEmployee}\n              value={true}\n              tooltip={system_text.CREATE}\n            />\n          </header>\n          <section className=\"titles__section flex__start\">\n            {system_text.EMPLOYEES_TITLES.map((m, i) => {\n              return <h3 key={i}>{m}</h3>;\n            })}\n          </section>\n        </div>\n\n        {loaded && employees_list && employees_list.length > 0 ? (\n          <>\n            <ul className=\"employees__list flex__start\">\n              {employees_list.map((m) => {\n                return (\n                  <Employee\n                    list_view={list_view}\n                    toggleHandleEmployee={this.toggleHandleEmployee}\n                    employee={m}\n                    key={m._id}\n                    system_text={system_text}\n                    handleRemove={this.handleRemove}\n                  />\n                );\n              })}\n            </ul>\n          </>\n        ) : !loaded ? (\n          <EmployeeLoader arr={[...Array(5).keys()]} />\n        ) : (\n          <NoData text={system_text.NO_EMPLOYEES} />\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ employees, user, global }) {\n  return { employees, user, global };\n}\n\nexport default withRouter(connect(mapStateToProps, actions)(Employees));\n"]},"metadata":{},"sourceType":"module"}