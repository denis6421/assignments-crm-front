"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _query = _interopRequireDefault(require("./query"));

var _pagingQueryBuilder = _interopRequireDefault(require("./paging-query-builder"));

var _utils = _interopRequireDefault(require("../utils"));

var LoadRelationsQueryBuilder = /*#__PURE__*/function () {
  (0, _createClass2["default"])(LoadRelationsQueryBuilder, null, [{
    key: "create",
    value: function create() {
      return new LoadRelationsQueryBuilder();
    }
  }, {
    key: "of",
    value: function of(RelationModel) {
      return new LoadRelationsQueryBuilder(RelationModel);
    }
  }]);

  function LoadRelationsQueryBuilder(RelationModel) {
    (0, _classCallCheck2["default"])(this, LoadRelationsQueryBuilder);
    this._query = new _query["default"]();
    this._query.relationModel = RelationModel;
    this._paging = new _pagingQueryBuilder["default"]();
  }

  (0, _createClass2["default"])(LoadRelationsQueryBuilder, [{
    key: "setRelationName",
    value: function setRelationName(relationName) {
      this._query.setOption('relationName', relationName);

      return this;
    }
  }, {
    key: "setPageSize",
    value: function setPageSize(pageSize) {
      this._paging.setPageSize(pageSize);

      return this;
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this._paging.setOffset(offset);

      return this;
    }
  }, {
    key: "prepareNextPage",
    value: function prepareNextPage() {
      this._paging.prepareNextPage();

      return this;
    }
  }, {
    key: "preparePreviousPage",
    value: function preparePreviousPage() {
      this._paging.preparePreviousPage();

      return this;
    }
  }, {
    key: "getProperties",
    value: function getProperties() {
      return this._query.properties;
    }
  }, {
    key: "setProperties",
    value: function setProperties(properties) {
      this._query.properties = _utils["default"].castArray(properties);
      return this;
    }
  }, {
    key: "addProperty",
    value: function addProperty(property) {
      this._query.addProperty(property);

      return this;
    }
  }, {
    key: "getWhereClause",
    value: function getWhereClause() {
      return this._query.condition;
    }
  }, {
    key: "setWhereClause",
    value: function setWhereClause(whereClause) {
      this._query.condition = whereClause;
      return this;
    }
  }, {
    key: "getSortBy",
    value: function getSortBy() {
      return this._query.getOption('sortBy');
    }
  }, {
    key: "setSortBy",
    value: function setSortBy(sortBy) {
      this._query.setOption('sortBy', _utils["default"].castArray(sortBy));

      return this;
    }
  }, {
    key: "build",
    value: function build() {
      this._query.setOptions(this._paging.build());

      return this._query;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var source = {
        pageSize: this._paging.pageSize,
        offset: this._paging.offset,
        props: this._query.properties,
        where: this._query.condition,
        sortBy: this._query.options && this._query.options.sortBy
      };
      var target = {};

      if (source.pageSize > 0) {
        target.pageSize = source.pageSize;
      }

      if (source.offset > 0) {
        target.offset = source.offset;
      }

      if (Array.isArray(source.props) && source.props.length) {
        target.props = source.props;
      }

      if (source.where) {
        target.where = source.where;
      }

      if (source.sortBy) {
        target.sortBy = source.sortBy;
      }

      return target;
    }
  }]);
  return LoadRelationsQueryBuilder;
}();

exports["default"] = LoadRelationsQueryBuilder;